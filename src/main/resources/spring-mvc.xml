<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:mvc="http://www.springframework.org/schema/mvc"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<mvc:annotation-driven />
	<context:component-scan base-package="net.ngg.example">
		<context:include-filter type="regex" expression="net.ngg.example.*"/>
	</context:component-scan>
	
	<context:property-placeholder
		location="classpath:application.properties" />
		
	<!-- It resolves a logical view name into a View object that delegates rendering responsibility to a template(usually a JSP)
	located in the web application's context. -->
	<bean id="jspViewResolver" 
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp"/>
	</bean>
	
	<!-- org.springframework.jdbc.datasource.DriverManagerDataSource建立连接是只要有连接就新建一个connection,根本没有连接池的作用 -->
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
			<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
			<property name="driverClassName" value="${jdbc.driver}" />
			<!-- 基本属性 url、user、password -->
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			
			<!-- 配置初始化大小、最小、最大 -->
			<property name="initialSize" value="${jdbc.pool.init}" />
			<property name="minIdle" value="${jdbc.pool.minIdle}" />
			<property name="maxActive" value="${jdbc.pool.maxActive}" />
			
			<!-- 配置获取连接等待超时的时间 -->
			<property name="maxWait" value="60000" />

			<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			
			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="300000" />

			<property name="validationQuery" value="${jdbc.testSql}" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />

			<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） -->
			<!-- <property name="poolPreparedStatements" value="true" /> -->
			<!-- <property name="maxPoolPreparedStatementPerConnectionSize"
				value="20" /> -->

			<!-- 配置监控统计拦截的filters -->
			<property name="filters" value="stat" />
			<!-- 监控统计慢SQL，5000毫秒 -->
			<property name="connectionProperties" value="druid.stat.slowSqlMillis=5000" />
		</bean>
		
		<tx:annotation-driven transaction-manager="transactionManager" />
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  			<property name="dataSource" ref="dataSource" />
		</bean>
		
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		    <property name="dataSource" ref="dataSource" />
		    <property name="typeAliasesPackage" value="com.github.elizabetht.model"/>
		    <property name="mapperLocations" value="classpath*:com/github/elizabetht/mappers/*.xml" />
		</bean>
		
		<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		    <constructor-arg index="0" ref="sqlSessionFactory" />
		</bean>
		
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		    <property name="basePackage" value="com.github.elizabetht.mappers" />
		</bean>

</beans>